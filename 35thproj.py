# -*- coding: utf-8 -*-
"""35thproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/126q6pXm2oZkOhg-B_sYhirWLGel_Kseb
"""

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, month, year, count, to_date

import matplotlib.pyplot as plt
import pandas as pd

# Spark Session
spark = SparkSession.builder.appName("MedicalReportsAnalysis").getOrCreate()

# Load dataset
df = spark.read.csv("/content/medical_reports.csv", header=True, inferSchema=True)

# Convert ReportDate to DateType
df = df.withColumn("ReportDate", to_date(col("ReportDate")))

df.show(5)
df.printSchema()

from pyspark.sql.functions import month, quarter, year

df_kpi = df.withColumn("Month", month("ReportDate")) \
           .withColumn("Quarter", quarter("ReportDate")) \
           .withColumn("Year", year("ReportDate"))

df_kpi.show(5)

from pyspark.sql.functions import *

# 1. Check for nulls in each column
df.select([count(when(col(c).isNull(), c)).alias(c) for c in df.columns]).show()

# 2. Drop rows with nulls (if any)
df_clean = df.dropna()

# 3. Remove duplicate reports (if any)
df_clean = df_clean.dropDuplicates(["ReportID"])

# 4. Ensure data types are correct
df_clean = df_clean.withColumn("ResultValue", col("ResultValue").cast("double"))

# 5. Trim Doctor and TestType (remove accidental spaces)
from pyspark.sql.functions import trim
df_clean = df_clean.withColumn("Doctor", trim(col("Doctor"))) \
                   .withColumn("TestType", trim(col("TestType")))

# 6. Date sanity check - filter only valid 2025 records
df_clean = df_clean.filter((col("ReportDate") >= "2025-01-01") & (col("ReportDate") <= "2025-12-31"))

# Show cleaned data
df_clean.show(5)

# --- SQL KPIs ---
df_kpi.createOrReplaceTempView("medical")

# Monthly Test Count
monthly_sql = spark.sql("""
    SELECT Month, COUNT(*) AS Count
    FROM medical
    GROUP BY Month
    ORDER BY Month
""").toPandas()

# Quarterly Test Count
quarterly_sql = spark.sql("""
    SELECT Quarter, COUNT(*) AS Count
    FROM medical
    GROUP BY Quarter
    ORDER BY Quarter
""").toPandas()

# Most Common Test Type
testtype_sql = spark.sql("""
    SELECT TestType, COUNT(*) AS Count
    FROM medical
    GROUP BY TestType
    ORDER BY Count DESC
""").toPandas()

# --- Visualization ---
# Monthly test trend (Line Chart)
plt.figure(figsize=(6,4))
plt.plot(monthly_sql["Month"], monthly_sql["Count"], marker='o', color="skyblue")
plt.title("Monthly Test Trend (SQL)")
plt.xlabel("Month")
plt.ylabel("Tests")
plt.grid(True)
plt.show()

# Quarterly Test Count (Bar Chart)
plt.figure(figsize=(6,4))
plt.bar(quarterly_sql["Quarter"], quarterly_sql["Count"], color="orange")
plt.title("Quarterly Test Count (SQL)")
plt.xlabel("Quarter")
plt.ylabel("Tests")
plt.show()

# Most common test type (Pie Chart)
plt.figure(figsize=(6,6))
plt.pie(testtype_sql["Count"], labels=testtype_sql["TestType"], autopct='%1.1f%%', startangle=140)
plt.title("Test Type Distribution (SQL)")
plt.show()

# --- RDD KPIs ---
rdd = df_kpi.rdd

# 1. Total Reports
total_reports_rdd = rdd.count()

# 2. Unique Patients
unique_patients_rdd = rdd.map(lambda x: x.PatientID).distinct().count()

# 3. Most Active Doctor
active_doctor_rdd = rdd.map(lambda x: (x.Doctor,1)) \
                       .reduceByKey(lambda a,b: a+b) \
                       .collect()

doctor_df = pd.DataFrame(active_doctor_rdd, columns=["Doctor","Tests"]).sort_values("Tests", ascending=False)

# --- Visualization ---
# Total Reports vs Unique Patients (Pie Chart)
plt.figure(figsize=(5,5))
plt.pie([total_reports_rdd, unique_patients_rdd], labels=["Total Reports","Unique Patients"], autopct='%1.1f%%', colors=["blue","purple"])
plt.title("Reports vs Patients (RDD)")
plt.show()

# Most Active Doctor (Horizontal Bar Chart)
plt.figure(figsize=(6,4))
plt.barh(doctor_df["Doctor"], doctor_df["Tests"], color="red")
plt.title("Most Active Doctor (RDD)")
plt.xlabel("Tests")
plt.ylabel("Doctor")
plt.show()

# Scatter plot (Doctor vs Tests)
plt.figure(figsize=(6,4))
plt.scatter(doctor_df["Doctor"], doctor_df["Tests"], color="green", s=100)
plt.title("Doctor Workload (RDD)")
plt.xlabel("Doctor")
plt.ylabel("Tests")
plt.xticks(rotation=30)
plt.show()

from pyspark.sql.functions import avg, desc

# 4. Highest Load Month
highest_month = df_kpi.groupBy("Month").count().orderBy(desc("count")).toPandas()

# 5. Avg ResultValue by Test Type
avg_result = df_kpi.groupBy("TestType").agg(avg("ResultValue").alias("AvgResult")).toPandas()

# 6. Doctor-wise Test Count
doctor_counts = df_kpi.groupBy("Doctor").count().toPandas()

# --- Visualization ---
# Highest Load Month (Line Plot)
plt.figure(figsize=(6,4))
plt.plot(highest_month["Month"], highest_month["count"], marker="o", linestyle="--", color="teal")
plt.title("Highest Load Month (DF)")
plt.xlabel("Month")
plt.ylabel("Tests")
plt.grid(True)
plt.show()

# Avg Result by Test Type (Bar Chart)
plt.figure(figsize=(6,4))
plt.bar(avg_result["TestType"], avg_result["AvgResult"], color="brown")
plt.title("Average Result Value by Test Type (DF)")
plt.xlabel("Test Type")
plt.ylabel("Avg Result")
plt.xticks(rotation=45)
plt.show()

# Doctor-wise Test Count (Pie Chart)
plt.figure(figsize=(6,6))
plt.pie(doctor_counts["count"], labels=doctor_counts["Doctor"], autopct='%1.1f%%', startangle=120)
plt.title("Doctor-wise Test Distribution (DF)")
plt.show()

# =========================================================
# Medical Reports Dashboard (Streamlit + Plotly)
# =========================================================

import streamlit as st
import pandas as pd
import plotly.express as px

# ---------------------------
# Page Configuration
# ---------------------------
st.set_page_config(page_title="Medical Reports Dashboard", layout="wide")
st.title("🏥 Medical Reports Analytics Dashboard")

# ---------------------------
# Load Data
# ---------------------------
df = pd.read_csv("medical_reports.csv")
df["ReportDate"] = pd.to_datetime(df["ReportDate"])

# Derive Month, Quarter, and Year
df["Month"] = df["ReportDate"].dt.month
df["Quarter"] = df["ReportDate"].dt.quarter
df["Year"] = df["ReportDate"].dt.year

# ---------------------------
# Sidebar Filters
# ---------------------------
st.sidebar.header("🔍 Filters")
years = sorted(df["Year"].unique())
selected_year = st.sidebar.selectbox("Select Year", years, index=len(years)-1)
selected_doctor = st.sidebar.multiselect("Select Doctor(s)", df["Doctor"].unique(), default=df["Doctor"].unique())

filtered_df = df[(df["Year"] == selected_year) & (df["Doctor"].isin(selected_doctor))]

# ---------------------------
# KPI Section
# ---------------------------
total_reports = len(filtered_df)
unique_patients = filtered_df["PatientID"].nunique()
most_common_test = filtered_df["TestType"].mode()[0]
active_doctor = filtered_df["Doctor"].value_counts().idxmax()

# Display KPIs in two columns
col1, col2 = st.columns(2)
with col1:
    st.metric("🧾 Total Reports", total_reports)
    st.metric("👩‍⚕️ Most Active Doctor", active_doctor)
with col2:
    st.metric("🧍‍♂️ Unique Patients", unique_patients)
    st.metric("🧪 Most Common Test Type", most_common_test)

st.markdown("---")

# ---------------------------
# Charts Section
# ---------------------------
col3, col4 = st.columns(2)

# 1️⃣ Monthly Trend
monthly = filtered_df.groupby("Month").size().reset_index(name="Count")
fig1 = px.line(monthly, x="Month", y="Count", markers=True, title="📅 Monthly Test Count", color_discrete_sequence=["#1f77b4"])
col3.plotly_chart(fig1, use_container_width=True)

# 2️⃣ Quarterly Trend
quarterly = filtered_df.groupby("Quarter").size().reset_index(name="Count")
fig2 = px.bar(quarterly, x="Quarter", y="Count", text="Count", title="📊 Quarterly Test Count", color_discrete_sequence=["#ff7f0e"])
col4.plotly_chart(fig2, use_container_width=True)

# 3️⃣ Doctor-wise Test Count
doctor_counts = filtered_df.groupby("Doctor").size().reset_index(name="Count").sort_values("Count", ascending=False)
fig3 = px.bar(doctor_counts, x="Doctor", y="Count", color="Count", title="👩‍⚕️ Doctor-wise Test Count", color_continuous_scale="viridis")
col3.plotly_chart(fig3, use_container_width=True)

# 4️⃣ Test Type Distribution
testtype = filtered_df["TestType"].value_counts().reset_index()
testtype.columns = ["TestType", "Count"]
fig4 = px.pie(testtype, names="TestType", values="Count", title="🧬 Test Type Distribution", hole=0.4)
col4.plotly_chart(fig4, use_container_width=True)

# 5️⃣ Highest Load Month
highest_load = monthly.loc[monthly["Count"].idxmax()]
st.markdown(f"### 🗓️ Highest Load Month: **{int(highest_load['Month'])}** with **{int(highest_load['Count'])} tests**")

st.markdown("---")

# 6️⃣ Average Result Value by Test Type
avg_result = filtered_df.groupby("TestType")["ResultValue"].mean().reset_index()
fig5 = px.bar(avg_result, x="TestType", y="ResultValue", title="📈 Average Result Value by Test Type", color="ResultValue", color_continuous_scale="turbo")
st.plotly_chart(fig5, use_container_width=True)

# ---------------------------
# Footer
# ---------------------------
st.markdown("© 2025 Medical Analytics Dashboard | Built with ❤️ using PySpark + Streamlit + Plotly")



